package components

import "fmt"
import "github.com/nathan-hello/nat-auth/auth/problems"
import "unicode"

func borderColor(t bool) string {
	if t == true {
		return "border-red-400"
	}
	return "border-blue-400"
}

templ user(errorBorder bool, value string) {
	<div>
		<label for="input-group-1" class="block mb-2 font-medium text-gray-900 dark:text-white">Username or Email</label>
		<div class="relative mb-6">
			<div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
				@svgUser()
			</div>
			<input
				type="text"
				id="input-group-1"
				class={ fmt.Sprintf("bg-gray-50 border text-gray-900  rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5  dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 %v", borderColor(errorBorder)) }
				placeholder="Smokey96 or smokey96@bears.com"
				name="username"
				value={ value }
			/>
		</div>
	</div>
}

templ email(errorBorder bool, value string) {
	<div>
		<label for="input-group-1" class="block mb-2  font-medium text-gray-900 dark:text-white">Email (optional)</label>
		<div class="relative ">
			<div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
				@svgEmail()
			</div>
			<input
				type="text"
				id="input-group-1"
				class={ fmt.Sprintf("bg-gray-50 border text-gray-900  rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5  dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 %v", borderColor(errorBorder)) }
				placeholder="brown@bears.com"
				name="email"
				value={ value }
			/>
		</div>
	</div>
}

templ username(errorBorder bool, value string) {
	<div>
		<label for="username" class="block mb-2  font-medium text-gray-900 dark:text-white">Username</label>
		<div class="relative">
			<div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
				@svgUser()
			</div>
			<input
				name="username"
				class={ fmt.Sprintf("bg-gray-50 border text-gray-900  rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5  dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 %v", borderColor(errorBorder)) }
				type="text"
				id="website-admin"
				placeholder="ilovepicnics00"
				value={ value }
			/>
		</div>
	</div>
}

templ password(errorBorder bool) {
	<div>
		<label for="password" class="block mb-2  font-medium text-gray-900 dark:text-white">Password</label>
		<input
			type="password"
			id="password"
			name="password"
			class={ fmt.Sprintf("bg-gray-50 border  text-gray-900  rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 %v", borderColor(errorBorder)) }
			placeholder="•••••••••"
			required
		/>
	</div>
}

templ passwordConfirm(errorBorder bool) {
	<div>
		<label for="confirm_password" class="block font-medium text-gray-900 dark:text-white">Confirm password</label>
		<input
			type="password"
			name={ "password-confirmation" }
			class={ fmt.Sprintf("bg-gray-50 border text-gray-900  rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 %v", borderColor(errorBorder)) }
			placeholder="•••••••••"
			required
		/>
	</div>
}

templ submitFormButton() {
	<button
		onclick="document.getElementById('errors-container').remove()"
		class="block w-60 my-2 mx-auto h-10 rounded-md bg-green-800 text-white "
		type="submit"
	>
		Submit
	</button>
}

templ authRedirect(s string, link string) {
	<p class="float-left my-2 mx-auto text-blue-950 w-min whitespace-nowrap mt-5  underline"><a href={ templ.URL(link) }>{ s }</a></p>
}

templ renderErrs(errors []problems.AuthError) {
	if len(errors) > 0 {
		<div id="errors-container">
			for _, v := range errors {
				@AlertBox(v.Message)
			}
		</div>
	}
}

templ SignUpForm(previousUsername string, errors []problems.AuthError) {
	<form class="text-2xl gap-y-4 flex flex-col max-w-screen-md mx-auto" hx-post="/auth/signup" hx-target="this">
		<p class="font-semibold text-gray-100 text-center text-2xl mx-auto  border-b border-white w-min whitespace-nowrap px-20 pb-2 mb-6">
			Create an account
		</p>
		// @email(len(problems.GetErrorByCategory(errors, "email")) > 0, previousUsername)
		@username(len(problems.GetErrorByCategory(errors, "username")) > 0, previousUsername)
		@password(len(problems.GetErrorByCategory(errors, "password")) > 0)
		@passwordConfirm(len(problems.GetErrorByCategory(errors, "password_confirmation")) > 0)
		@submitFormButton()
		@authRedirect("Already have an account?", "/auth/signin")
		<div class="py-2"></div>
		@renderErrs(errors)
	</form>
}

templ SignUp(username string, errors []problems.AuthError) {
		<div class="pt-8">
			@SignUpForm(username, errors)
		</div>
}

templ SignInForm(username string, errors []problems.AuthError) {
	<form class="text-2xl gayp-y-4 flex flex-col max-w-screen-md mx-auto" hx-post="/auth/signin" hx-target="this">
		<p class="font-semibold text-gray-100 text-center text-2xl mx-auto  border-b border-white w-min whitespace-nowrap px-20 pb-2 mb-6">
			Sign In
		</p>
		@user(len(problems.GetErrorByCategory(errors, "username"))>1, username)
		@password(len(problems.GetErrorByCategory(errors, "password"))>1)
		@submitFormButton()
		@authRedirect("Need an account?", "/auth/signup")
		<div class="py-2"></div>
		@renderErrs(errors)
	</form>
}

templ SignIn(username string, errors []problems.AuthError) {
		<div class="pt-8">
			@SignInForm(username, errors)
		</div>
}

templ AlertBox(s string) {
	<div class="p-4 mb-4 text-sm rounded-lg bg-gray-800 text-red-400" role="alert">
		{ sentenceizeString(s) }
	</div>
}

func sentenceizeString(s string) string {
	if s == "" {
		return ""
	}
	runes := []rune(s)
	runes[0] = unicode.ToUpper(runes[0])
	runes = append(runes, '.')
	return string(runes)
}
