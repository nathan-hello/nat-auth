package pwui

import "github.com/nathan-hello/nat-auth/auth/providers/password"

type PasswordUICopy struct {
	RegisterTitle        string
	RegisterDescription  string
	LoginTitle           string
	LoginDescription     string
	Register             string
	RegisterPrompt       string
	LoginPrompt          string
	Login                string
	ChangePrompt         string
	CodeResend           string
	CodeReturn           string
	Logo                 string
	InputEmail           string
	InputPassword        string
	InputCode            string
	InputRepeat          string
	ButtonContinue       string
}

type PasswordUIErrorCopy map[password.BitError]string


func DefaultPasswordUITheme() Theme {
	return Theme{
		Title: "NatAuth",
		Logo: "/favicon.ico",
		Background: "white",
		Primary: "blue",
		Font: Font{
			Family: "Varela Round, sans-serif",
			Scale: "1",
		},
	}
}

func DefaultPasswordUIErrorCopy() PasswordUIErrorCopy {
	return PasswordUIErrorCopy{
		password.ErrInvalidCode:     "Code is incorrect.",
		password.ErrInvalidEmail:    "Email is not valid.",
		password.ErrInvalidPassword: "Password is incorrect.",
		password.ErrPasswordMismatch: "Passwords do not match.",
		password.ErrPasswordTooLong: "Password is too long.",
		password.ErrPasswordTooShort: "Password is too short.",
		password.ErrUsernameInvalidFormat: "Username is not valid.",
		password.ErrUsernameTaken: "Username is already taken.",
		password.ErrUsernameTooLong: "Username is too long.",
		password.ErrUsernameTooShort: "Username is too short.",
		password.ErrInternalServer: "Internal server error.",
	}
}

func DefaultPasswordUICopy() PasswordUICopy {
	return PasswordUICopy{
		RegisterTitle:        "Welcome to the app",
		RegisterDescription:  "Sign in with your email",
		LoginTitle:           "Welcome to the app",
		LoginDescription:     "Sign in with your email",
		Register:             "Register",
		RegisterPrompt:       "Don't have an account?",
		LoginPrompt:          "Already have an account?",
		Login:                "Login",
		ChangePrompt:         "Forgot password?",
		CodeResend:           "Resend code",
		CodeReturn:           "Back to",
		Logo:                 "A",
		InputEmail:           "Email",
		InputPassword:        "Password",
		InputCode:            "Code",
		InputRepeat:          "Repeat password",
		ButtonContinue:       "Continue",
	}
}


templ PasswordUILogin(theme Theme, copy PasswordUICopy, errCopy PasswordUIErrorCopy, state password.FormState, err password.BitError) {
	@layout(theme) {
		@PasswordUILoginForm(copy, errCopy, state, err)
	}
}

templ PasswordUILoginForm(copy PasswordUICopy, errorCopy PasswordUIErrorCopy, state password.FormState, err password.BitError) {
		<form data-component="form" method="post">
			if err != 0 {
				@FormAlert(errorCopy, err, "danger")
			}
			<input
				data-component="input"
				type="email"
				name="username"
				required
				placeholder={ copy.InputEmail }
				autofocus={ err == 0 }
				if state.Username != "" {
					value={ state.Username }
				}
			/>
			<input
				data-component="input"
				autofocus={ err != 0 && err.Has(password.ErrBadLogin) }
				required
				type="password"
				name="password"
				placeholder={ copy.InputPassword }
				autocomplete="current-password"
			/>
			<button data-component="button">{ copy.ButtonContinue }</button>
			<div data-component="form-footer">
				<span>
					{ copy.RegisterPrompt }
					<a data-component="link" href="/auth/register">
						{ copy.Register }
					</a>
				</span>
				<a data-component="link" href="/auth/change">
					{ copy.ChangePrompt }
				</a>
			</div>
		</form>
}

templ PasswordUIRegister(theme Theme, copy PasswordUICopy, errorCopy PasswordUIErrorCopy, state password.FormState, err password.BitError) {
	@layout(theme) {
		<form data-component="form" method="post">
			if err != 0 {
				@FormAlert(errorCopy, err, "danger")
			}
			if state.Type == "start" {
				@PasswordUIRegisterForm(copy, errorCopy, state, err)
			}
			if state.Type == "code" {
				@PasswordUICodeForm(copy)
			}
		</form>
	}
}

// 1) State is start. User puts in email, password, repeat.
//    - User is actually made in DB. TOTP is optional.
// 2) State is code. User either puts in TOTP or skips.
templ PasswordUIRegisterForm(copy PasswordUICopy, errorCopy PasswordUIErrorCopy, state password.FormState, err password.BitError) {
	<input type="hidden" name="action" value="register"/>
	<input
		data-component="input"
		autofocus={ err == 0 || err.IsUsernameError() }
		type="email"
		name="email"
		if state.Username != "" && !err.IsUsernameError() {
			value={ state.Username }
		}
		required
		placeholder={ copy.InputEmail }
	/>
	<input
		data-component="input"
		autofocus={ err.IsPasswordError() }
		type="password"
		name="password"
		placeholder={ copy.InputPassword }
		required
		autocomplete="new-password"
	/>
	<input
		data-component="input"
		type="password"
		name="repeat"
		required
		autofocus={ err.IsRepeatedError() }
		placeholder={ copy.InputRepeat }
		autocomplete="new-password"
	/>
	<button data-component="button">{ copy.ButtonContinue }</button>
	<div data-component="form-footer">
		<span>
			{ copy.LoginPrompt }
			<a data-component="link" href="/auth/login">
				{ copy.Login }
			</a>
		</span>
	</div>
}

templ PasswordUICodeForm(copy PasswordUICopy) {
	<input type="hidden" name="action" value="verify"/>
	<input
		data-component="input"
		autofocus
		name="code"
		minlength="6"
		maxlength="6"
		required
		placeholder={ copy.InputCode }
		autocomplete="one-time-code"
	/>
	<button data-component="button">{ copy.ButtonContinue }</button>
}

templ PasswordUIChange(theme Theme, copy PasswordUICopy, errorCopy PasswordUIErrorCopy, state password.FormState, err password.BitError) {
	@layout(theme) {
		<form data-component="form" method="post">
			if err != 0 {
				@FormAlert(errorCopy, err, "danger")
			}
			if state.Type == "start" {
				@PasswordUIChangeStartForm(copy, state)
			}
			if state.Type == "code" {
				@PasswordUICodeForm(copy)
			}
			if state.Type == "update" {
				@PasswordUIChangeUpdateForm(copy, state, err)
			}
			<button data-component="button">{ copy.ButtonContinue }</button>
		</form>
		if state.Type == "code" {
			<form method="post">
				<input type="hidden" name="action" value="code"/>
				<input type="hidden" name="email" value={ state.Username }/>
				<div data-component="form-footer">
					<span>
						{ copy.CodeReturn }
						<a data-component="link" href="/auth/login">
							{ copy.Login }
						</a>
					</span>
					<button data-component="link">{ copy.CodeResend }</button>
				</div>
			</form>
		}
	}
}

templ PasswordUIChangeStartForm(copy PasswordUICopy, state password.FormState) {
	<input type="hidden" name="action" value="code"/>
	<input
		data-component="input"
		autofocus
		type="email"
		name="email"
		required
		if state.Username != "" {
			value={ state.Username }
		}
		placeholder={ copy.InputEmail }
	/>
}

templ PasswordUIChangeUpdateForm(copy PasswordUICopy, state password.FormState, err password.BitError) {
	<input type="hidden" name="action" value="update"/>
	<input
		data-component="input"
		autofocus
		type="password"
		name="password"
		placeholder={ copy.InputPassword }
		required
		autocomplete="new-password"
	/>
	<input
		data-component="input"
		type="password"
		name="repeat"
		required
		placeholder={ copy.InputRepeat }
		autocomplete="new-password"
	/>
}