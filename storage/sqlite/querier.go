// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlite

import (
	"context"
)

type Querier interface {
	//DeleteTokensByUserId
	//
	//  DELETE FROM tokens WHERE id IN (
	//          SELECT token_id FROM users_tokens WHERE user_id = ?
	//      )
	DeleteTokensByUserId(ctx context.Context, userID string) error
	//DeleteUser
	//
	//  DELETE FROM users WHERE id = ?
	DeleteUser(ctx context.Context, id string) error
	//InsertToken
	//
	//  INSERT INTO tokens (jwt_type, jwt, valid, family) VALUES (?, ?, ?, ?) RETURNING id, jwt_type, jwt, valid, family
	InsertToken(ctx context.Context, arg InsertTokenParams) (Token, error)
	// table: users
	//
	//  INSERT INTO users ( id, email, username, password_salt, encrypted_password, password_created_at)
	//  VALUES (?, ?, ?, ?, ?, ?) RETURNING id, email, username
	InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error)
	//InsertUsersTokens
	//
	//  INSERT INTO users_tokens (user_id, token_id) VALUES (?, ?)
	InsertUsersTokens(ctx context.Context, arg InsertUsersTokensParams) error
	// table: tokens
	//
	//  SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE id = ?
	SelectTokenFromId(ctx context.Context, id int64) (Token, error)
	//SelectTokenFromJwtString
	//
	//  SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE jwt = ?
	SelectTokenFromJwtString(ctx context.Context, jwt string) (Token, error)
	//SelectUserByEmailWithPassword
	//
	//  SELECT (id,
	//          email,
	//          username,
	//          password_salt,
	//          encrypted_password,
	//          password_created_at
	//          ) FROM users WHERE email = ?
	SelectUserByEmailWithPassword(ctx context.Context, email string) (interface{}, error)
	//SelectUserById
	//
	//  SELECT id, email, username FROM users WHERE id = ?
	SelectUserById(ctx context.Context, id string) (SelectUserByIdRow, error)
	//SelectUserByUsernameWithPassword
	//
	//  SELECT (id,
	//          email,
	//          username,
	//          password_salt,
	//          encrypted_password,
	//          password_created_at
	//          ) FROM users WHERE username = ?
	SelectUserByUsernameWithPassword(ctx context.Context, username string) (interface{}, error)
	//SelectUserIdFromToken
	//
	//  SELECT user_id FROM users_tokens WHERE token_id = ? LIMIT 1
	SelectUserIdFromToken(ctx context.Context, tokenID int64) (string, error)
	// table: users_tokens
	//
	//  SELECT user_id, token_id FROM users_tokens WHERE user_id = ?
	SelectUsersTokens(ctx context.Context, userID string) ([]UsersToken, error)
	//UpdateTokenValid
	//
	//  UPDATE tokens SET valid = ? WHERE jwt = ? RETURNING id
	UpdateTokenValid(ctx context.Context, arg UpdateTokenValidParams) (int64, error)
	//UpdateTokensFamilyInvalid
	//
	//  UPDATE tokens SET valid = FALSE WHERE family = ?
	UpdateTokensFamilyInvalid(ctx context.Context, family string) error
	//UpdateUserTokensToInvalid
	//
	//  UPDATE tokens SET valid = FALSE WHERE id IN (
	//          SELECT token_id FROM users_tokens WHERE user_id = ?
	//      )
	UpdateUserTokensToInvalid(ctx context.Context, userID string) error
}

var _ Querier = (*Queries)(nil)
