// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlite

import (
	"context"
)

const insertFamily = `-- name: InsertFamily :exec
INSERT OR REPLACE INTO families (subject, family, valid) VALUES (?, ?, ?)
`

type InsertFamilyParams struct {
	Subject string
	Family  string
	Valid   bool
}

// InsertFamily
//
//	INSERT OR REPLACE INTO families (subject, family, valid) VALUES (?, ?, ?)
func (q *Queries) InsertFamily(ctx context.Context, arg InsertFamilyParams) error {
	_, err := q.db.ExecContext(ctx, insertFamily, arg.Subject, arg.Family, arg.Valid)
	return err
}

const insertSecret = `-- name: InsertSecret :exec
INSERT OR REPLACE INTO secrets (subject, secret) VALUES (?, ?)
`

type InsertSecretParams struct {
	Subject string
	Secret  string
}

// InsertSecret
//
//	INSERT OR REPLACE INTO secrets (subject, secret) VALUES (?, ?)
func (q *Queries) InsertSecret(ctx context.Context, arg InsertSecretParams) error {
	_, err := q.db.ExecContext(ctx, insertSecret, arg.Subject, arg.Secret)
	return err
}

const insertSubject = `-- name: InsertSubject :exec
INSERT INTO subjects (username, subject) VALUES (?, ?)
`

type InsertSubjectParams struct {
	Username string
	Subject  string
}

// InsertSubject
//
//	INSERT INTO subjects (username, subject) VALUES (?, ?)
func (q *Queries) InsertSubject(ctx context.Context, arg InsertSubjectParams) error {
	_, err := q.db.ExecContext(ctx, insertSubject, arg.Username, arg.Subject)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (username, password) VALUES (?, ?)
`

type InsertUserParams struct {
	Username string
	Password string
}

// InsertUser
//
//	INSERT INTO users (username, password) VALUES (?, ?)
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.Username, arg.Password)
	return err
}

const invalidateUser = `-- name: InvalidateUser :exec
UPDATE families SET valid = FALSE WHERE subject = ?
`

// InvalidateUser
//
//	UPDATE families SET valid = FALSE WHERE subject = ?
func (q *Queries) InvalidateUser(ctx context.Context, subject string) error {
	_, err := q.db.ExecContext(ctx, invalidateUser, subject)
	return err
}

const selectFamily = `-- name: SelectFamily :one
SELECT valid FROM families WHERE subject = ? AND family = ?
`

type SelectFamilyParams struct {
	Subject string
	Family  string
}

// SelectFamily
//
//	SELECT valid FROM families WHERE subject = ? AND family = ?
func (q *Queries) SelectFamily(ctx context.Context, arg SelectFamilyParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, selectFamily, arg.Subject, arg.Family)
	var valid bool
	err := row.Scan(&valid)
	return valid, err
}

const selectPasswordByUsername = `-- name: SelectPasswordByUsername :one
SELECT password FROM users WHERE username = ?
`

// SelectPasswordByUsername
//
//	SELECT password FROM users WHERE username = ?
func (q *Queries) SelectPasswordByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, selectPasswordByUsername, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const selectSecret = `-- name: SelectSecret :one
SELECT secret FROM secrets WHERE subject = ?
`

// SelectSecret
//
//	SELECT secret FROM secrets WHERE subject = ?
func (q *Queries) SelectSecret(ctx context.Context, subject string) (string, error) {
	row := q.db.QueryRowContext(ctx, selectSecret, subject)
	var secret string
	err := row.Scan(&secret)
	return secret, err
}

const selectSubjectByUsername = `-- name: SelectSubjectByUsername :one
SELECT subject FROM subjects WHERE username = ?
`

// SelectSubjectByUsername
//
//	SELECT subject FROM subjects WHERE username = ?
func (q *Queries) SelectSubjectByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, selectSubjectByUsername, username)
	var subject string
	err := row.Scan(&subject)
	return subject, err
}
